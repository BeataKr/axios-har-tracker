name: Auto Release

on:
  push:
    branches: [ master ]

jobs:
  check-version:
    runs-on: ubuntu-latest
    outputs:
      version-changed: ${{ steps.check.outputs.changed }}
      new-version: ${{ steps.check.outputs.version }}
      previous-version: ${{ steps.check.outputs.previous-version }}
      
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 2
        
    - name: Check if version changed
      id: check
      run: |
        # Check current version
        CURRENT_VERSION=$(node -p "require('./package.json').version")
        echo "Current version: $CURRENT_VERSION"

        # Get previous version using git show (safer method)
        PREVIOUS_VERSION=$(git show HEAD~1:package.json | node -p "JSON.parse(require('fs').readFileSync('/dev/stdin', 'utf8')).version" 2>/dev/null || echo "0.0.0")
        echo "Previous version: $PREVIOUS_VERSION"
        
        # Check if version changed
        if [ "$CURRENT_VERSION" != "$PREVIOUS_VERSION" ]; then
          echo "✅ Version changed from $PREVIOUS_VERSION to $CURRENT_VERSION"
          echo "changed=true" >> $GITHUB_OUTPUT
          echo "version=$CURRENT_VERSION" >> $GITHUB_OUTPUT
          echo "previous-version=$PREVIOUS_VERSION" >> $GITHUB_OUTPUT
        else
          echo "❌ Version unchanged ($CURRENT_VERSION)"
          echo "changed=false" >> $GITHUB_OUTPUT
          echo "version=$CURRENT_VERSION" >> $GITHUB_OUTPUT
          echo "previous-version=$PREVIOUS_VERSION" >> $GITHUB_OUTPUT
        fi
        
        # Debug output values
        echo "=== DEBUG OUTPUT VALUES ==="
        echo "changed=$([ "$CURRENT_VERSION" != "$PREVIOUS_VERSION" ] && echo "true" || echo "false")"
        echo "version=$CURRENT_VERSION"
        echo "previous-version=$PREVIOUS_VERSION"
        echo "=========================="

  build-and-test:
    needs: check-version
    if: ${{ needs.check-version.outputs.version-changed == 'true' }}
    runs-on: ubuntu-latest
    
    steps:
    - name: Debug condition
      run: |
        echo "=== DEBUG BUILD-AND-TEST JOB ==="
        echo "version-changed output: '${{ needs.check-version.outputs.version-changed }}'"
        echo "Condition result: ${{ needs.check-version.outputs.version-changed == 'true' }}"
        echo "=========================="
        
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20.x'
        cache: 'npm'
        
    - name: Install dependencies
      run: npm ci
      
    - name: Run tests
      run: npm test
      
    - name: Build package
      run: npm run build
      
    - name: Create package tarball
      run: npm pack
      
    - name: Upload build artifacts
      uses: actions/upload-artifact@v4
      with:
        name: package-build
        path: |
          dist/
          *.tgz
        retention-days: 90

  create-release:
    needs: [check-version, build-and-test]
    if: ${{ needs.check-version.outputs.version-changed == 'true' }}
    runs-on: ubuntu-latest
    permissions:
      contents: write
      
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Download build artifacts
      uses: actions/download-artifact@v4
      with:
        name: package-build
        
    - name: Generate changelog for release
      id: changelog
      run: |
        VERSION="v${{ needs.check-version.outputs.new-version }}"
        echo "Generating changelog for $VERSION"

        # Check if CHANGELOG.md exists
        if [ -f "CHANGELOG.md" ]; then
          # Extract section for current version
          CHANGELOG_CONTENT=$(sed -n "/## \[${{ needs.check-version.outputs.new-version }}\]/,/## \[/p" CHANGELOG.md | sed '$d' | tail -n +2)
          if [ -z "$CHANGELOG_CONTENT" ]; then
            CHANGELOG_CONTENT="Changes in version ${{ needs.check-version.outputs.new-version }}"
          fi
        else
          # Create default changelog content
          cat > release-notes.md << 'EOF'
        ## What's Changed
        
        Version ${{ needs.check-version.outputs.new-version }}
        
        **Full Changelog**: https://github.com/${{ github.repository }}/compare/v${{ needs.check-version.outputs.previous-version }}...v${{ needs.check-version.outputs.new-version }}
        EOF
          echo "changelog-file=release-notes.md" >> $GITHUB_OUTPUT
          exit 0
        fi

        # Save changelog to file
        echo "$CHANGELOG_CONTENT" > release-notes.md
        echo "changelog-file=release-notes.md" >> $GITHUB_OUTPUT
        
    - name: Create Git Tag
      run: |
        VERSION="v${{ needs.check-version.outputs.new-version }}"
        git config user.name "github-actions[bot]"
        git config user.email "github-actions[bot]@users.noreply.github.com"
        git tag -a "$VERSION" -m "Release $VERSION"
        git push origin "$VERSION"
        
    - name: Create GitHub Release
      uses: softprops/action-gh-release@v2
      with:
        tag_name: v${{ needs.check-version.outputs.new-version }}
        name: Release v${{ needs.check-version.outputs.new-version }}
        body_path: release-notes.md
        draft: false
        prerelease: false
        files: |
          *.tgz
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}